import 'package:flutter/material.dart';
import '../models/task.dart';

class TaskProvider with ChangeNotifier {
  final List<Task> _tasks = [];
  final List<String> _customLists = ['–í—Ö–æ–¥—è—â–∏–µ']; // üîπ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–ø–∏—Å–∫–∏

  List<Task> get tasks => [..._tasks];
  List<String> get customLists => [..._customLists];

  List<String> get allTags {
    return _tasks
        .expand((task) => task.tags)
        .toSet()
        .toList();
  }

  void addTag(String tag) {
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ ‚Äî –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
    _customLists.add(tag);
    notifyListeners();
  }

  void addTask(Task task) {
    _tasks.add(task);
    if (!_customLists.contains(task.listName)) {
      _customLists.add(task.listName); // üîπ –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–æ–≤—ã–π ‚Äî –¥–æ–±–∞–≤–∏–º
    }
    notifyListeners();
  }

  void updateTask(Task task) {
    final index = _tasks.indexWhere((t) => t.id == task.id);
    if (index != -1) {
      _tasks[index] = task;
      notifyListeners();
    }
  }

  void deleteTask(Task task) {
    _tasks.removeWhere((t) => t.id == task.id);
    notifyListeners();
  }

  List<Task> tasksForDate(DateTime date) {
    return _tasks.where((task) {
      if (task.date == null) return false;
      return task.date!.year == date.year &&
          task.date!.month == date.month &&
          task.date!.day == date.day;
    }).toList();
  }

  List<Task> tasksForToday() {
    final today = DateTime.now();
    return _tasks.where((t) =>
      t.date != null &&
      t.date!.year == today.year &&
      t.date!.month == today.month &&
      t.date!.day == today.day
    ).toList();
  }

  List<Task> tasksForNext7Days() {
    final now = DateTime.now();
    final week = now.add(const Duration(days: 7));
    return _tasks.where((t) =>
      t.date != null &&
      t.date!.isAfter(now.subtract(const Duration(days: 1))) &&
      t.date!.isBefore(week)
    ).toList();
  }

  List<Task> tasksWithTag(String tag) {
    return _tasks.where((t) => t.tags.contains(tag)).toList();
  }

  List<Task> tasksInList(String listName) {
    return _tasks.where((t) => t.listName == listName).toList();
  }

  void loadTasks() {
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥–≥—Ä—É–∂–∞—Ç—å —Å Firestore –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ
    notifyListeners();
  }
}
